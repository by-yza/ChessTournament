<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chess Tournament</title>
    <link href="style.css" rel="stylesheet" type="text/css"/>
    <link rel="shortcut icon" href="favicon.ico">

    <script src="script.js"></script>
</head>
<body>
    <div class="menu">
        <img class="logo" src="logo.png">
        <div class="links">
            <a href="https://wwww.exemplo.com"class="menutext">Cadastro</a>
            <a href="https://wwww.exemplo.com"class="menutext">Torneios Anteriores</a>
        </div>
    </div>
    <div class="main">
        <div class="red-box">
            <p>                O ChessTournament.com é uma plataforma online projetada para simplificar a organização de torneios de xadrez emocionantes, adequados para jogadores de todas as habilidades. Nosso objetivo é fornecer uma solução completa para aqueles que desejam criar e gerenciar competições de xadrez.
            </p>
            <div class="box-3">
                <div class="btn btn-three">
                  <span href="https://wwww.exemplo.com">CADASTRAR JOGADORES</span>
                </div>
            </div>        
    </div>
</body>
</html>


@import url('https://fonts.googleapis.com/css2?family=Oswald:wght@400;500;600;700&family=Rosario:wght@400;500;600;700&display=swap');
* {
      margin: 0;
      background-color: #222226;
}

.bkg {
      width: 1062px;
      height: 813px;
      flex-shrink: 0;
}
.menu {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      width: 100%;
      height: 10vw;
}

.logo {
      margin-left: 2vw;
      height: 10vw;
}
.links{
      margin-top: 3.3vw;
}
.menutext {
      text-decoration: none;
      color: #fff;
      font-family: 'Oswald', sans-serif;
      font-size: 2.5vw;
      margin-left: 2vw;
      margin-right: 3.5vw;
}
.textbox {
      width: 30%;
      height: 30vw;
      margin-left: 4vw;
      margin-top: 5vw;
}

span {
      font-family: 'Rosario', sans-serif;
}
.box-3 {
      padding-top: 2vw;
      padding-bottom: 2vw;
      background-color: transparent;
}
.btn {
	line-height: 50px;
	height: 50px;
	text-align: center;
	width: 250px;
	cursor: pointer;
}
.btn-three {
	color: #FFF;
	transition: all 0.5s;
	position: relative;
}
.btn-three::before {
	content: '';
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	z-index: 1;
	background-color: rgba(255,255,255,0.1);
	transition: all 0.3s;
}
.btn-three:hover::before {
	opacity: 0 ;
	transform: scale(0.5,0.5);
}
.btn-three::after {
	content: '';
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	z-index: 1;
	opacity: 0;
	transition: all 0.3s;
	border: 1px solid rgba(255,255,255,0.5);
	transform: scale(1.2,1.2);
}
.btn-three:hover::after {
	opacity: 1;
	transform: scale(1,1);
}

.container {
    background-color: #fff;
}

.aside{
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    flex-direction: column;
    font-family: 'Rosario', sans-serif;
    font-size: 1.8vw;
    font-weight: 100;
    line-height: 3vw;
    color: #fff;
    height: fit-content;
    width: fit-content;
}


.red-box > p {
    color: white;
    font-size: 18px;
    background-color: transparent;
    padding: 2vw;
    font-family: 'Rosario', sans-serif;
      font-size: 1.8vw;
      font-weight: 100;
      line-height: 3vw;
      color: #fff;
}

button {
    background-color: white;
    color: red;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
}

.main {
    width: 100vw;
    height: 80vh;
    align-items: center;
    display: flex;
    text-align: center;
    justify-content: center;
}

.red-box {
    background-color: rgba(107, 106, 106, 0.384);
    width: 60vw;
    height: 60vh;
    padding: 20px;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center; /* Centralizar verticalmente */
    justify-content: center; /* Centralizar horizontalmente */
    border-radius: 40px;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Torneio de Jogadores</title>
</head>
<body>
    <h1>Torneio de Jogadores</h1>
    
    <!-- Adicionar jogador -->
    <div>
        <label for="playerName">Nome do Jogador:</label>
        <input type="text" id="playerName" placeholder="Digite o nome do jogador">
        <button id="addPlayer">Adicionar Jogador</button>
    </div>

    <!-- Iniciar Torneio -->
    <div>
        <button id="startTournament">Iniciar Torneio</button>
    </div>

    <!-- Tabela de Partidas -->
    <table id="matchesTable">
        <!-- Partidas geradas aqui -->
    </table>

    <!-- Registrar Resultados -->
    <div>
        <button id="recordResults">Registrar Resultados</button>
    </div>

    <!-- Lista de Jogadores -->
    <h2>Lista de Jogadores:</h2>
    <table id="playersTable">
        <thead>
            <tr>
                <th>Índice</th>
                <th>Nome do Jogador</th>
                <th>Pontuação</th>
            </tr>
        </thead>
        <tbody>
            <!-- Jogadores serão exibidos aqui -->
        </tbody>
    </table>

    <!-- Top 3 Jogadores -->
    <h2>Top 3 Jogadores:</h2>
    <ul id="top3List">
        <!-- Os melhores jogadores serão exibidos aqui -->
    </ul>

    <!-- Botões para Salvar e Exibir Dados no LocalStorage -->
    <div>
        <button id="saving">Salvar Dados</button>
        <button id="exbitingButton">Exibir Dados</button>
    </div>

    <script src="script.js"></script>

</body>
</html>


// Array para armazenar jogadores e suas pontuações
const players = [];

// Array para armazenar resultados das partidas
const matchResults = [];

// Adicionar jogador ao array
document.getElementById("addPlayer").addEventListener("click", () => {
  const playerName = document.getElementById("playerName").value;
  if (playerName.trim() !== "") {
    players.push({
      name: playerName,
      score: 0,
    });
    document.getElementById("playerName").value = "";
    updatePlayerList();
  }
});

// Iniciar torneio
document.getElementById("startTournament").addEventListener("click", () => {
  generateMatches();
});

// Gerar partidas
function generateMatches() {
  const matchesTable = document.getElementById("matchesTable");
  matchesTable.innerHTML = "";

  for (let i = 0; i < players.length; i++) {
    for (let j = i + 1; j < players.length; j++) {
      const matchRow = document.createElement("tr");
      matchRow.innerHTML = `
                <td>${players[i].name}</td>
                <td>vs</td>
                <td>${players[j].name}</td>
                <td><input type="text" class="resultInput" placeholder="Resultado"></td>
            `;
      matchesTable.appendChild(matchRow);
    }
  }
}
// Registrar Resultados
document.getElementById("recordResults").addEventListener("click", () => {
  const resultInputs = document.querySelectorAll(".resultInput");

  resultInputs.forEach((input) => {
    const result = input.value.trim();
    const playersInMatch =
      input.parentElement.parentElement.getElementsByTagName("td");
    const player1Name = playersInMatch[0].textContent;
    const player2Name = playersInMatch[2].textContent;

    if (result === player1Name) {
      updatePlayerScore(player1Name, 2);
    } else if (result === player2Name) {
      updatePlayerScore(player2Name, 2);
    } else {
      updatePlayerScore(player1Name, 1);
      updatePlayerScore(player2Name, 1);
    }
  });

  // Ordenar jogadores por pontuação (decrescente)
  players.sort((a, b) => b.score - a.score);

  // Exibir o top 3 jogadores
  showTop3();

  // Ordenar jogadores por pontuação (decrescente)
  players.sort((a, b) => b.score - a.score);

  // Exibir o top 3 jogadores
  showTop3();
});

// Atualizar pontuação do jogador
function updatePlayerScore(playerName, points) {
  const player = players.find((player) => player.name === playerName);
  if (player) {
    player.score += points;
  }
}

// Atualizar lista de jogadores
function updatePlayerList() {
  const playersTable = document.getElementById("playersTable").getElementsByTagName("tbody")[0];
  playersTable.innerHTML = "";
  players.forEach((player, index) => {
    const row = playersTable.insertRow();
    const cellIndex = row.insertCell(0);
    const cellName = row.insertCell(1);
    const cellScore = row.insertCell(2);
    cellIndex.innerHTML = index + 1;
    cellName.innerHTML = player.name;
    cellScore.innerHTML = player.score;
  });
}

// Exibir o top 3 jogadores
function showTop3() {
  const top3List = document.getElementById("top3List");
  top3List.innerHTML = "";

  for (let i = 0; i < Math.min(3, players.length); i++) {
    const player = players[i];
    const listItem = document.createElement("li");
    listItem.textContent = `${player.name} - ${player.score} ponto(s)`;
    top3List.appendChild(listItem);
  }
}

// Armazenar dados no LocalStorage
function savingData() {
  localStorage.setItem('players', JSON.stringify(players));
  localStorage.setItem('matchResults', JSON.stringify(matches));
}

// Exibir dado do LocalStorage
function exbitingData() {
  players = JSON.parse(localStorage.getItem('players')) || [];
  matches = JSON.parse(localStorage.getItem('matches')) || [];
  //Observação: mostrar os dados na tela quando eu entender o código da Rafaela
}

document.getElementById("saving").addEventListener("click", savingData());
document.getElementById("exbitingButton").addEventListener("click", exbitingData());

